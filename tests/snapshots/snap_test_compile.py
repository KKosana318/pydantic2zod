# -*- coding: utf-8 -*-
# snapshottest: v1 - https://goo.gl/zC4yUc
from __future__ import unicode_literals

from snapshottest import Snapshot

snapshots = Snapshot()

snapshots["test_annotated_fields 1"] = """
/**
 * NOTE: automatically generated by the pydantic2zod compiler.
 */

import { z } from "zod";

export const Employee = z.object({
  age: z.number().int().gte(18).lte(67),
  level: z.number().int().gt(0).lt(6),
  salary: z.number().gt(1000).lt(10000),
}).strict();
export type EmployeeType = z.infer<typeof Employee>;
"""

snapshots["test_builtin_types 1"] = """
/**
 * NOTE: automatically generated by the pydantic2zod compiler.
 */

import { z } from "zod";

export const User = z.object({
  id: z.string().uuid(),
  name: z.string(),
  created_at: z.string().datetime(),
  belongs_to: z.union([
    z.string().uuid(),
    z.null(),
  ]),
}).strict();
export type UserType = z.infer<typeof User>;
"""

snapshots["test_class_variables_are_skipped 1"] = """
/**
 * NOTE: automatically generated by the pydantic2zod compiler.
 */

import { z } from "zod";

export const RpcMessage = z.object({
  msg_type: z.string(),
}).strict();
export type RpcMessageType = z.infer<typeof RpcMessage>;
"""

snapshots["test_generic_field_type_is_any_with_no_typevar_bounds 1"] = """
/**
 * NOTE: automatically generated by the pydantic2zod compiler.
 */

import { z } from "zod";

export const User = z.object({
  name: z.string(),
  address: z.any(),
}).strict();
export type UserType = z.infer<typeof User>;
"""

snapshots["test_initializes_empty_dicts 1"] = """
/**
 * NOTE: automatically generated by the pydantic2zod compiler.
 */

import { z } from "zod";

export const Class = z.object({
  some_dict: z.record(z.string(), z.number().int()).default({}),
  some_other_dict: z.record(z.string(), z.number().int()).default({}),
  created_at: z.number().int().default(0),
}).strict();
export type ClassType = z.infer<typeof Class>;
"""

snapshots["test_initializes_empty_lists 1"] = """
/**
 * NOTE: automatically generated by the pydantic2zod compiler.
 */

import { z } from "zod";

export const Class = z.object({
  methods: z.array(z.string()).default([]),
  dunder_methods: z.array(z.string()).default([]),
  created_at: z.number().int().default(0),
}).strict();
export type ClassType = z.infer<typeof Class>;
"""

snapshots["test_renames_models_based_on_given_rules 1"] = """
/**
 * NOTE: automatically generated by the pydantic2zod compiler.
 */

import { z } from "zod";

export const Class = z.object({
  name: z.string(),
}).strict();
export type ClassType = z.infer<typeof Class>;

export const BaseClass = z.object({
  name: z.string(),
  methods: z.array(z.string()),
}).strict();
export type BaseClassType = z.infer<typeof BaseClass>;

export const Module = z.object({
  name: z.string(),
  classes: z.array(BaseClass),
}).strict();
export type ModuleType = z.infer<typeof Module>;
"""

snapshots["test_user_defined_types_inheriting_from_str 1"] = """
/**
 * NOTE: automatically generated by the pydantic2zod compiler.
 */

import { z } from "zod";

export const User = z.object({
  id: z.string(),
}).strict();
export type UserType = z.infer<typeof User>;
"""

snapshots["test_with_pydantic_model_config 1"] = """
/**
 * NOTE: automatically generated by the pydantic2zod compiler.
 */

import { z } from "zod";

export const Foo = z.object({
}).strict();
export type FooType = z.infer<typeof Foo>;

export const Bar = z.object({
}).strict();
export type BarType = z.infer<typeof Bar>;

export const Model = z.object({
  x: z.union([
    z.string(),
    z.number().int(),
  ]),
  y: z.union([
    Foo,
    Bar,
  ]),
}).strict();
export type ModelType = z.infer<typeof Model>;
"""
