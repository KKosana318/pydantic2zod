# -*- coding: utf-8 -*-
# snapshottest: v1 - https://goo.gl/zC4yUc
from __future__ import unicode_literals

from snapshottest import Snapshot


snapshots = Snapshot()

snapshots['test_generic_field_type_is_any_with_no_typevar_bounds 1'] = '''
/**
 * NOTE: automatically generated by the pydantic2zod compiler.
 */

import { z } from "zod";

export const User = z.object({
  name: z.string(),
  address: z.any(),
});
export type UserType = z.infer<typeof User>;
'''

snapshots['test_initializes_empty_lists 1'] = '''
/**
 * NOTE: automatically generated by the pydantic2zod compiler.
 */

import { z } from "zod";

export const Class = z.object({
  methods: z.array(z.string()).default([]),
  dunder_methods: z.array(z.string()).default([]),
  created_at: z.number().int().default(0),
});
export type ClassType = z.infer<typeof Class>;
'''

snapshots['test_renames_models_based_on_given_rules 1'] = '''
/**
 * NOTE: automatically generated by the pydantic2zod compiler.
 */

import { z } from "zod";

export const Class = z.object({
  name: z.string(),
});
export type ClassType = z.infer<typeof Class>;

export const BaseClass = z.object({
  name: z.string(),
  methods: z.array(z.string()),
});
export type BaseClassType = z.infer<typeof BaseClass>;

export const Module = z.object({
  name: z.string(),
  classes: z.array(BaseClass),
});
export type ModuleType = z.infer<typeof Module>;
'''

snapshots['test_with_pydantic_model_config 1'] = '''
/**
 * NOTE: automatically generated by the pydantic2zod compiler.
 */

import { z } from "zod";

export const Foo = z.object({
});
export type FooType = z.infer<typeof Foo>;

export const Bar = z.object({
});
export type BarType = z.infer<typeof Bar>;

export const Model = z.object({
  x: z.union([
    z.string(),
    z.number().int(),
  ]),
  y: z.union([
    Foo,
    Bar,
  ]),
});
export type ModelType = z.infer<typeof Model>;
'''
